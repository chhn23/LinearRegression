# -*- coding: utf-8 -*-
"""Building_LR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ctrr78u7vpRjNEo-d4lPueLCBwOg0Ihv
"""

import numpy as np

"""**Linear regression**"""

class Linear_Regression:
  #initiating the parameters learning_rate, no_of_iterations
  def __init__(self, learning_rate, no_of_iterations):
    self.learning_rate=learning_rate
    self.no_of_iterations=no_of_iterations

  def fit(self,X,Y):
    #no of training examples and number of features
    self.m, self.n = X.shape #no of rows and columns

    #initiating the weight and bias of the model
    self.w=np.zeros(self.n)
    self.b=0
    self.X=X
    self.Y=Y

    #implementing gradient Descent
    for i in range(self.no_of_iterations):
      self.update_weight()

  def update_weight(self):
    Y_prediction=self.predict(self.X)
    #calculate gradient
    dw=-(2*(self.X.T).dot(self.Y-Y_prediction))/self.m
    db= -2*np.sum(self.Y-Y_prediction)/self.m
    #Updating the weights
    self.w=self.w-self.learning_rate*dw
    self.b=self.b-self.learning_rate*db

  def predict(self,X):
    return X.dot(self.w)+self.b

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

"""Using LR model for prediction"""

#importing the dependencies
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

"""Data Preprocessing

"""

# loading the data from csv file to pandas data frame
salary_data=pd.read_csv('/content/Salary_Data[1].csv')

#printing first five columns of data frame
salary_data.head()

#last five rows of data frame
salary_data.tail()

#number of rows and columns in data frame
salary_data.shape

#Checking for missing values
salary_data.isnull().sum()

#Dropping null values no recommended way
salary_data.dropna(subset=['Salary'],inplace=True)

salary_data.isnull().sum()

"""Splitting the feature and target

"""

X=salary_data.iloc[:,:-1].values #will not have salary column
Y=salary_data.iloc[:,1].values   #will not have experience column
print (X)

print (Y)

"""Splitting data to test and train set"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.33,random_state=2) #Out of total data i want 30 percent data to be test data and rest as train data. Random state is how data will be splitted
print(X_train.shape)

"""Training the Linear Regresssion Model"""

model=Linear_Regression(learning_rate=0.02,no_of_iterations=1000)

model.fit(X_train,Y_train)

#Printing the parameters values(weight and bias)
print('weight = ',model.w[0])
print ('bias = ',model.b)

"""y=9514(x)+23697
salary=9514(experience)+23697
"""

#Predict salary value for test data
test_data_prediction=model.predict(X_test)

print(test_data_prediction)

plt.scatter(X_test,Y_test,color='red')
plt.scatter(X_test,test_data_prediction,color='blue')
plt.xlabel('experience')
plt.ylabel('salary')
plt.show()